#!/usr/bin/env perl

use strict;
use warnings;
use Search::ESsearcher;
use Getopt::Long qw(:config pass_through);
use Data::Dumper;

sub version{
	print "essearch: 0.0.0\n";
};

# set all the templates the servers use to to fault
my $search;
my $options;
my $output;
my $elastic;
my $module;
my $invert;
my $print_search;
my $print_results;
my $help;
GetOptions(
		   's=s' => \$search,
		   'g=s' => \$options,
		   'o=s' => \$output,
		   'e=s' => \$elastic,
		   'S' => \$print_search,
		   'R' => \$print_results,
		   'm=s' => \$module,
		   'i' => \$invert,
		   'h' => \$help,
		   'help' => \$help,
		   );

# Use module as the base to use allowing
# the other settings to override it if defined.
if (defined( $module )){
	if (!defined( $options )){
		$options=$module;
	}
	if (!defined( $output )){
		$output=$module;
	}
	if (!defined( $search )){
		$search=$module;
	}
}

my $ess = Search::ESsearcher->new();
# print the help if asked to
if ( $help ){
	&version;
	print '
-s <search>  The search template to use.
-g <getopts> The getopts config to use.
-o <output>  Thee output template to use.
-m <module>  Set all of the above to the same.
             Any of the above being set will override this.
-e <elastic> The elasticsearch config to use.
-S           Print the search out after filling it in and exit.
-R           Run the search and print it via Data::Dumper.
-i           Invert the results.
-h           Print the help.
--help       Print the help.

The printed help after this line varies based on the loaded
search template. If one is found it will be printed.

'.$ess->fetch_help;
	exit 255;
}

# reels in the options
$ess->options_set( $options );
$ess->load_options;
$ess->get_options;

# reels in the search template
$ess->search_set( $search );
$ess->load_search;
my $filled_in=$ess->search_fill_in;
if ( $print_search ){
	print $filled_in;
	exit 255;
}

# reels in the elastic config
$ess->elastic_set( $elastic );
$ess->load_elastic;

#runs the search
my $results=$ess->search_run;
if ($print_results){
	print Dumper($results);
	exit;
}

# processes the results
$ess->load_output;
my @formatted=$ess->results_process( $results );
if (!defined($formatted[0])){
	exit 0;
}
#invert if requested
if ($invert){
	@formatted=reverse(@formatted);
}
print join("\n", @formatted)."\n";
exit 0;


